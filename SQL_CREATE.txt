-- SQL CREATE
-- This text file contains all the scripts needed to create the database schema on an empty database. 
-- It includes scripts to create tables, indexes, and views. 

-- Scripts to create tables 

-- Tables USER contains attributes email, name, address, and phone number.
-- Primary key: email 
CREATE TABLE [USER](
    email VARCHAR(80) NOT NULL,
    name VARCHAR(60),
    address VARCHAR(60),
    phone_number INT,
    CONSTRAINT USERPRIMKEY
        PRIMARY KEY(email)
);

-- Table SELLER contains attributes email, bio, and photo.
-- Primary key: email
-- Foreign key: email references [USER](email).
CREATE TABLE SELLER(
    email VARCHAR(80) NOT NULL,
    bio VARCHAR(255),
    photo VARCHAR(120) NOT NULL DEFAULT "dummy.img",
    CONSTRAINT SELLPK
        PRIMARY KEY(email),
    CONSTRAINT SELLFK
        FOREIGN KEY(email) REFERENCES [USER](email)
			ON UPDATE CASCADE	ON DELETE CASCADE
);
-- Table BUYER contains attributes email, and karma_points.
-- Primary key: email
-- Foreign key: email references USER(email)
CREATE TABLE BUYER(
    email VARCHAR(80) NOT NULL,
    karma_points INT NOT NULL DEFAULT 0,
    CONSTRAINT BUYPK
        PRIMARY KEY(email),
    CONSTRAINT BUYFK
        FOREIGN KEY(email) REFERENCES [USER](email)
            ON UPDATE CASCADE	ON DELETE CASCADE
);

-- Table WISH contains attributes wish_number, email, and product_id.
-- Primary key: email, wish_number
-- Foreign key: email references BUYER(email).
-- Foreign key 2: product_id references INVENTORY(product_id).
CREATE TABLE WISH(
    wish_number INT NOT NULL,
    email VARCHAR(80) NOT NULL,
    product_id INT NOT NULL,
    CONSTRAINT WISHPK
        PRIMARY KEY(wish_number,email),
    CONSTRAINT WISHFK1
        FOREIGN KEY(email) REFERENCES BUYER(email)
			ON UPDATE NO ACTION		ON DELETE NO ACTION,
	CONSTRAINT WISHFK2
		FOREIGN KEY(product_id) REFERENCES INVENTORY(product_id)
			ON UPDATE NO ACTION		ON DELETE NO ACTION
);

-- Table STORE contains name, seller email, description, and banner. 
-- Primary key: name
-- Foreign key: seller references SELLER(email)
CREATE TABLE STORE(
    name VARCHAR(255) NOT NULL,
    seller_email VARCHAR(80) NOT NULL,
    description VARCHAR(255),
    banner VARCHAR(255) NOT NULL DEFAULT "dummybanner.img",
    CONSTRAINT STOREPK
        PRIMARY KEY(name),
    CONSTRAINT STOREFK
        FOREIGN KEY(seller_email) REFERENCES SELLER(email)
			ON DELETE NO ACTION		ON UPDATE CASCADE
);

-- Table URL contains attributes link and name.
-- Primary key: link, name
-- Foreign key: name references STORE(name).
CREATE TABLE URL(
    link VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
	CONSTRAINT URLPK
		PRIMARY KEY(link,name),
    	CONSTRAINT URLFK
        FOREIGN KEY(name) references STORE(name)
			ON DELETE NO ACTION		ON UPDATE RESTRICT
);

-- Table INVENTORY contains product_id, quantity, file_type, file_size, description,
-- buying_price, title, store_name, download_URL, and is_for_sale
-- Primary key: product_id
-- Foreign key: store_name references STORE(name)
CREATE TABLE INVENTORY
(	product_id INT NOT NULL,
	quantity INT NOT NULL DEFAULT 0,
	file_type VARCHAR(16) NOT NULL,
	file_size VARCHAR(16),
	description VARCHAR(512),
	buying_price FLOAT(10,2) NOT NULL,
	title VARCHAR(64) NOT NULL,
	store_name VARCHAR(64) NOT NULL,
	download_URL VARCHAR(2048) NOT NULL,
	is_for_sale BOOLEAN NOT NULL DEFAULT TRUE,
	CONSTRAINT INVPK
		PRIMARY KEY(product_id),
	CONSTRAINT INVSTOREFK
		FOREIGN KEY(store_name) REFERENCES STORE(name)
			ON DELETE NO ACTION		ON UPDATE RESTRICT		
);
		
-- Table RENTAL contains product_id, duration, start date, and price.
-- Primary key: product_id
-- Foreign key: product_id references INVENTORY(product_id)
CREATE TABLE RENTAL
(	product_id INT NOT NULL,
	duration VARCHAR(16) NOT NULL,
	start_date DATE NOT NULL,
	price FLOAT(10,2) NOT NULL,
	CONSTRAINT RENTPK
		PRIMARY KEY(product_id),
	CONSTRAINT RENTINVFK
		FOREIGN KEY(product_id) REFERENCES INVENTORY(product_id)
			ON DELETE CASCADE		ON UPDATE RESTRICT
);

-- Table SUBSCRIPTION contains attributes product_id, subscription_type, start_date, and
-- price.
-- Primary key: product_id
-- Foreign key: product_id references INVENTORY(product_id).
CREATE TABLE SUBSCRIPTION
(	product_id INT NOT NULL,
	subscription_type VARCHAR(16) NOT NULL,
	start_date DATE NOT NULL,
	price FLOAT(10,2) NOT NULL,
	CONSTRAINT SUBPK
		PRIMARY KEY(product_id),
	CONSTRAINT SUBINVFK
		FOREIGN KEY(product_id) REFERENCES INVENTORY(product_id)
			ON DELETE CASCADE		ON UPDATE RESTRICT		
);

-- Table IMAGE contains product_id and image file.
-- Primary key: product_id
-- Foreign key: product_id references INVENTORY(product_id)
CREATE TABLE IMAGE
(	product_id INT NOT NULL,
	image_file VARCHAR(2048) NOT NULL,
	CONSTRAINT IMGPK
		PRIMARY KEY(product_id,image_file),
	CONSTRAINT IMGINVFK
		FOREIGN KEY(product_id) REFERENCES INVENTORY(product_id)
			ON DELETE CASCADE		ON UPDATE RESTRICT		
);


-- Table IP_TYPE contains word
-- Primary key: word
CREATE TABLE IP_TYPE
(	word VARCHAR(32) NOT NULL,
	CONSTRAINT IPTYPEPK
		PRIMARY KEY(word)
);


-- Table PRODUCT_KEYWORD contains product_id and word.
-- Primary key: product_id, word
-- Foreign key: product_id references INVENTORY(product_id)
-- Foreign key 2: word references IP_TYPE(word)
CREATE TABLE PRODUCT_KEYWORD
(	product_id INT NOT NULL,
	word VARCHAR(32) NOT NULL,
	CONSTRAINT PROKEYPK
		PRIMARY KEY(product_id, word),
	CONSTRAINT PROKEYIPTYPEFK
		FOREIGN KEY(word) REFERENCES IP_TYPE(word)
			ON DELETE NO ACTION 	ON UPDATE NO ACTION,
	CONSTRAINT PROKEYINVFK
		FOREIGN KEY(product_id) REFERENCES INVENTORY(product_id)
			ON DELETE CASCADE	ON UPDATE NO ACTION
);

-- Table FEEDBACK contains attributes comment_id, rating, comment, comment_time, 
-- product_id, and email.
-- Primary key: comment_id
-- Foreign key: product_id references INVENTORY(product_id).
-- Foreign key 2: email references BUYER(email).
CREATE TABLE FEEDBACK
(	comment_id INT NOT NULL,
	rating INT NOT NULL,
	comment VARCHAR(512) NOT NULL,
	comment_time DATETIME NOT NULL,
	product_id INT NOT NULL,
	email VARCHAR(128) NOT NULL,
	CONSTRAINT FDBKPK
		PRIMARY KEY(comment_id),
	CONSTRAINT FDBKINVFK
		FOREIGN KEY(product_id) REFERENCES INVENTORY(product_id)
			ON DELETE CASCADE ON UPDATE RESTRICT,
	CONSTRAINT FDBKBYRFK
		FOREIGN KEY(email) REFERENCES BUYER(email)
			ON DELETE NO ACTION ON UPDATE RESTRICT
);

-- Table PURCHASE contains confirmation_no, receiver_email, gift, buyer_email,
-- payment_id, and purchase_date.
-- Primary key: confirmation_no
-- Foreign key: payment_id references PAYMENT_METHOD(payment_id)
-- Foreign key 2: buyer_email references BUYER(email)
CREATE TABLE PURCHASE
( confirmation_no INT NOT NULL,
    receiver_email VARCHAR(128) NOT NULL,
	gift BOOLEAN NOT NULL,
	buyer_email VARCHAR(128) NOT NULL,
	payment_id INT NOT NULL,
	purchase_date DATETIME NOT NULL,
	CONSTRAINT PURCHASEPK
		PRIMARY KEY(confirmation_no),
	CONSTRAINT PURCHASESUPERFK
		FOREIGN KEY(payment_id) REFERENCES PAYMENT_METHOD(payment_id)
			ON DELETE NO ACTION	ON UPDATE NO ACTION,
	CONSTRAINT PURCHASEBUYERFK
		FOREIGN KEY(buyer_email) REFERENCES BUYER(email)
			ON DELETE NO ACTION		ON UPDATE NO ACTION
);


-- Table PAYMENT_METHOD contains payment_id
-- Primary key: payment_id
CREATE TABLE PAYMENT_METHOD
(	payment_id INT NOT NULL,
	CONSTRAINT PAYMENTPK
		PRIMARY KEY(payment_id)
);

-- Table CRYPTO_CURRENCY contains attributes payment_id, currency, and 
-- account_number.
-- Primary key: payment_id
-- Foreign key: payment_id references PAYMENT_METHOD(payment_id).
CREATE TABLE CRYPTO_CURRENCY
(	payment_id INT NOT NULL,
	currency VARCHAR(128) NOT NULL,
	account_number VARCHAR(128)	NOT NULL,
	CONSTRAINT CCPK
		PRIMARY KEY(payment_id),
	CONSTRAINT CCFK
		FOREIGN KEY(payment_id) REFERENCES PAYMENT_METHOD(payment_id)
			ON DELETE CASCADE ON UPDATE RESTRICT
);

-- Table KARMA_POINTS contains payment_id
-- Primary key: payment_id
-- Foreign key: payment_id references PAYMENT_METHOD(payment_id)
CREATE TABLE KARMA_POINTS
(	payment_id INT NOT NULL,
	CONSTRAINT KPPK
		PRIMARY KEY(payment_id),
	CONSTRAINT KPFK
		FOREIGN KEY(payment_id) REFERENCES PAYMENT_METHOD(payment_id)
			ON DELETE CASCADE	ON UPDATE RESTRICT
);


-- Table CARD contains attributes payment_id, currency, security_number, expiration_date,
-- and card_number.
-- Primary key: payment_id
-- Foreign key: payment_id references PAYMENT_METHOD(payment_id).
CREATE TABLE CARD
(	payment_id INT NOT NULL,
	security_number INT NOT NULL,
	expiration_date date NOT NULL,
	currency VARCHAR(128) NOT NULL DEFAULT 'USD', 
	card_number VARCHAR(128) NOT NULL,
	CONSTRAINT CARDPK
		PRIMARY KEY(payment_id),
	CONSTRAINT CARDFK
		FOREIGN KEY(payment_id) REFERENCES PAYMENT_METHOD(payment_id)
			ON DELETE CASCADE	ON UPDATE RESTRICT
);


-- Table PURCHASE_PAYMENT contains purchase_ payment_id, confirmation_no, and 
-- amount_spent 
-- Primary key: purchase_ payment_id and confirmation_no
-- Foreign key:  confirmation_no references PURCHASE(confirmation_no)
CREATE TABLE PURCHASE_PAYMENT
( 	purchase_payment_id INT NOT NULL,
	confirmation_no INT NOT NULL,
	amount_spent FLOAT(10,2) NOT NULL,
	CONSTRAINT PURCPAYPK
		PRIMARY KEY(purchase_payment_id, confirmation_no),
	CONSTRAINT PURCHPAYFK
		FOREIGN KEY(confirmation_no) REFERENCES PURCHASE(confirmation_no)
			ON DELETE CASCADE	ON UPDATE RESTRICT
);

-- Table PURCHASE_DETAILS contains attributes purchase_payment_id, confirmation_no,
-- quantity, product_id, and comment_id.
-- Primary key: purchase_payment_id, confirmation_no, and quantity.
-- Foreign key: payment_id, confirmation_no references PURCHASE_PAYEMENT -- (purchase_payment_id, confirmation_no)
-- Foreign key 2: product_id reference INVENTORY(product_id)
CREATE TABLE PURCHASE_DETAILS
( 	purchase_payment_id INT NOT NULL,
	confirmation_no INT NOT NULL,
	quantity INT NOT NULL DEFAULT 1,
	product_id INT,
	comment_id INT,
   CONSTRAINT PUR_DET 
		PRIMARY KEY(purchase_payment_id, confirmation_no, quantity),
   CONSTRAINT PUR_DET_FK
		FOREIGN KEY(purchase_payment_id, confirmation_no) REFERENCES PURCHASE_PAYMENT(purchase_payment_id,confirmation_no)
				ON DELETE CASCADE 	ON UPDATE RESTRICT,
		FOREIGN KEY(product_id) REFERENCES INVENTORY(product_id)
				ON DELETE SET NULL ON UPDATE RESTRICT,
		FOREIGN KEY(comment_id) REFERENCES FEEDBACK(comment_id)
				ON DELETE SET NULL	ON UPDATE RESTRICT
);


-- Scripts to create indexes
CREATE INDEX stores
ON INVENTORY (store_name);

CREATE INDEX words
ON PRODUCT_KEYWORD (word);


-- Scripts to create views 
CREATE VIEW [Wishes] AS
SELECT B.email, COUNT(W.wish_number) AS "Number of Wishes"
FROM BUYER AS B LEFT OUTER JOIN WISH AS W ON B.email = W.email
GROUP BY B.email
ORDER BY B.email ASC;

CREATE VIEW [Average Ratings] AS
SELECT I.product_id, I.title, AVG(F.rating) AS "Average Rating"
FROM INVENTORY AS I INNER JOIN FEEDBACK AS F ON I.product_id = F.product_id
GROUP BY I.product_id
ORDER BY AVG(F.rating) DESC;


